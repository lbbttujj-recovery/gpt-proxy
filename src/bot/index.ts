import { VK, MessageContext } from 'vk-io';
import { SessionManager } from '@vk-io/session';
import { createAIClient } from '../services/ai/factory';
import 'dotenv/config';
import { SceneManager } from '@vk-io/scenes';
import { getStartKeyboard, getGptKeyboard } from './keyboards';
import { registerScenes } from './scenes';

export async function startBot() {
  const GROUP_ID = Number(process.env.VK_GROUP_ID);

  if (!process.env.VK_API_TOKEN) {
    console.error('‚ùå –û—à–∏–±–∫–∞: –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è VK_API_TOKEN –Ω–µ –∑–∞–¥–∞–Ω–∞ –≤ .env');
    process.exit(1);
  }

  const vk = new VK({
    token: process.env.VK_API_TOKEN,
    pollingGroupId: GROUP_ID,
  });

  const ai = createAIClient();

  let isTalkMode = false;

  const sessionManager = new SessionManager();
  const sceneManager = new SceneManager();

  const startKeyboard = getStartKeyboard();
  const gptKeyboard = getGptKeyboard();

  registerScenes(sceneManager);

  vk.updates.on('message_new', sessionManager.middleware);
  vk.updates.on('message_new', sceneManager.middleware);
  vk.updates.on('message_new', sceneManager.middlewareIntercept);

  vk.updates.on('message_new', async (ctx: MessageContext, next) => {
    // –í—ã–±–∏—Ä–∞–µ–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å–µ—Å—Å–∏–∏: —á–∞—Ç (peerId) –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å
    const sessionId = String(ctx.peerId ?? ctx.senderId ?? 'default');

    // –£–¥–æ–±–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã stop –∏–∑ —Ç–µ–∫—Å—Ç–∞ –∏–ª–∏ payload
    const isStopCommand =
      (typeof ctx.text === 'string' &&
        ctx.text.trim().toLowerCase() === 'stop') ||
      (ctx.messagePayload &&
        ctx.messagePayload.command === 'talkMode' &&
        ctx.messagePayload.item === 'stop');

    const isChangeModelCommand =
      (typeof ctx.text === 'string' &&
        ctx.text.trim().toLowerCase() === 'change_model') ||
      (ctx.messagePayload && ctx.messagePayload.command === 'change_model');

    if (isStopCommand) {
      isTalkMode = false;
      // –ó–∞–∫—Ä—ã–≤–∞–µ–º (–æ—á–∏—â–∞–µ–º) —Å–µ—Å—Å–∏—é –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ "stop"
      ai.resetSession(sessionId);

      // –Ø–≤–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ –º–µ–Ω—é (–∑–∞–º–µ–Ω—è–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É)
      await ctx.send({ message: '–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º', keyboard: startKeyboard });
    }

    if (isTalkMode) {
      if (isStopCommand) {
        isTalkMode = false;
        // –ó–∞–∫—Ä—ã–≤–∞–µ–º (–æ—á–∏—â–∞–µ–º) —Å–µ—Å—Å–∏—é –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ "stop"
        ai.resetSession(sessionId);

        // –Ø–≤–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ –º–µ–Ω—é (–∑–∞–º–µ–Ω—è–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É)
        await ctx.send({ message: '–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º', keyboard: startKeyboard });
      } else if (isChangeModelCommand) {
        try {
          const current = ai.getModel();
          const strong = process.env.OPENAI_STRONG_MODEL || 'gpt-4o';
          const def = process.env.OPENAI_MODEL || 'gpt-4o-mini';
          const next = current.includes('mini') ? strong : def;
          ai.setModel(next);
          await ctx.send(`–ú–æ–¥–µ–ª—å –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∞ –Ω–∞: ${ai.getModel()}`);
        } catch (err) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ –º–æ–¥–µ–ª–∏:', err);
          await ctx.send('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –º–æ–¥–µ–ª—å.');
        }
      } else if (ctx.text) {
        try {
          const reply = await ai.askInSession(sessionId, ctx.text);
          // –ü–æ—Å–ª–µ –æ—Ç–≤–µ—Ç–∞ ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç (gpt-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∑–∞–¥–∞–Ω–∞ –∫–∞–∫ one_time –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏—Å—á–µ–∑–Ω–µ—Ç)
          await ctx.send(reply);
        } catch (error) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ AI:', error);
          await ctx.send(
            '‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç AI. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
          );
        }
      }
    } else {
      if (
        ctx.text === 'json_mode' ||
        (ctx.messagePayload &&
          ctx.messagePayload.command === 'mode' &&
          ctx.messagePayload.item === 'json')
      ) {
        return ctx.scene.enter('json');
      }
      if (
        ctx.text === 'talk_mode' ||
        (ctx.messagePayload &&
          ctx.messagePayload.command === 'mode' &&
          ctx.messagePayload.item === 'talk')
      ) {
        await ctx.send({
          message: '–ù—É —á—Ç–æ –∂, –ø–æ–≥–æ–≤–æ—Ä–∏–º.',
          keyboard: gptKeyboard,
        });
        isTalkMode = true;
      }
      if (isChangeModelCommand) {
        // –°–º–µ–Ω–∞ –º–æ–¥–µ–ª–∏ –∏ —Å–æ–æ–±—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç (–≤–Ω–µ talk-mode —Ç–æ–∂–µ –¥–æ—Å—Ç—É–ø–Ω–æ)
        try {
          const current = ai.getModel();
          const strong = process.env.OPENAI_STRONG_MODEL || 'gpt-4o';
          const def = process.env.OPENAI_MODEL || 'gpt-4o-mini';
          const nextModel = current.includes('mini') ? strong : def;
          ai.setModel(nextModel);
          await ctx.send(`–ú–æ–¥–µ–ª—å –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∞ –Ω–∞: ${ai.getModel()}`);
        } catch (err) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ –º–æ–¥–µ–ª–∏:', err);
          await ctx.send('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –º–æ–¥–µ–ª—å.');
        }
      }
      if (ctx.text === '/start') {
        await ctx.send({ message: '–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º', keyboard: startKeyboard });
      }
    }
    return next();
  });

  try {
    console.log('üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...');
    await vk.updates.start();
    console.log('‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ —Å–ª—É—à–∞–µ—Ç —Å–æ–±—ã—Ç–∏—è');
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞:', error);
    process.exit(1);
  }
}

export default startBot;
