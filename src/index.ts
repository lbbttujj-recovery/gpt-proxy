import { VK, Keyboard, MessageContext } from 'vk-io';
import { SessionManager } from '@vk-io/session';
import 'dotenv/config';
import { SceneManager, StepScene } from '@vk-io/scenes';
import { createAIClient } from './services/OpenAIClient';

const GROUP_ID = 232031142; // –±–µ–∑ club

if (!process.env.VK_API_TOKEN) {
  console.error('‚ùå –û—à–∏–±–∫–∞: –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è VK_API_TOKEN –Ω–µ –∑–∞–¥–∞–Ω–∞ –≤ .env');
  process.exit(1);
}

const vk = new VK({
  token: process.env.VK_API_TOKEN,
  pollingGroupId: GROUP_ID,
});

const ai = createAIClient();

let isTalkMode = false;

const sessionManager = new SessionManager();
const sceneManager = new SceneManager();

const startKeyboard = Keyboard.keyboard([
  Keyboard.textButton({
    label: 'json_mode',
    payload: { command: 'mode', item: 'json' },
    color: Keyboard.POSITIVE_COLOR,
  }),
  Keyboard.textButton({
    label: 'talk_mode',
    payload: { command: 'mode', item: 'talk' },
    color: Keyboard.POSITIVE_COLOR,
  }),
]);

const gptKeyboard = Keyboard.keyboard([
  Keyboard.textButton({
    label: 'stop',
    payload: { command: 'talkMode', item: 'stop' },
    color: Keyboard.NEGATIVE_COLOR,
  }),
]);

vk.updates.on('message_new', sessionManager.middleware);
vk.updates.on('message_new', sceneManager.middleware);
vk.updates.on('message_new', sceneManager.middlewareIntercept);

sceneManager.addScenes([
  new StepScene<MessageContext>('json', [
    async (ctx) => {
      if (ctx.scene.step.firstTime || !ctx.text) {
        return ctx.send('–í–≤–µ–¥–∏—Ç–µ json');
      }
      ctx.scene.state.json = ctx.text;
      return ctx.scene.step.next();
    },
    async (ctx) => {
      if (ctx.scene.step.firstTime || !ctx.text) {
        return ctx.send(
          '–ö–∞–∫–∏–µ –ø–æ–ª—è –∏–∑–º–µ–Ω–∏—Ç—å? –ü–µ—Ä–µ—á–∏—Å–ª–∏ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –∏–ª–∏ "all" –¥–ª—è –≤—Å–µ—Ö',
        );
      }
      ctx.scene.state.fields = ctx.text;
      return ctx.scene.step.next();
    },
    async (ctx) => {
      if (ctx.scene.step.firstTime || !ctx.text) {
        return ctx.send('–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ');
      }
      ctx.scene.state.count = Number(ctx.text);
      return ctx.scene.step.next();
    },
    async (ctx) => {
      const { fields, json, count } = ctx.scene.state as {
        fields: string;
        json: string;
        count: number;
      };
      const changeFields =
        fields === 'all'
          ? '–ò–∑–º–µ–Ω–∏ –≤—Å–µ –ø–æ–ª—è'
          : `–ò–∑–º–µ–Ω–∏ —Å–ª–µ–¥—É—é—â–∏–µ –ø–æ–ª—è: ${fields}`;
      const request = `–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π –º–∞—Å—Å–∏–≤ –∏–∑ ${count} JSON –ø–æ –ø—Ä–∏–º–µ—Ä—É: ${json}. ${changeFields}`;
      console.log(request);
      await ctx.send('eee');
      return ctx.scene.step.next();
    },
  ]),
]);

vk.updates.on('message_new', async (ctx, next) => {
  // –í—ã–±–∏—Ä–∞–µ–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å–µ—Å—Å–∏–∏: —á–∞—Ç (peerId) –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å
  const sessionId = String(ctx.peerId ?? ctx.senderId ?? 'default');

  if (isTalkMode) {
    if (ctx.text === 'stop') {
      isTalkMode = false;
      // –ó–∞–∫—Ä—ã–≤–∞–µ–º (–æ—á–∏—â–∞–µ–º) —Å–µ—Å—Å–∏—é –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ "stop"
      ai.resetSession(sessionId);

      await ctx.send({ message: '–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º', keyboard: startKeyboard });
    } else if (ctx.text) {
      try {
        const reply = await ai.askInSession(sessionId, ctx.text);
        await ctx.send(reply);
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ AI:', error);
        await ctx.send('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç AI. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
      }
    }
  } else {
    if (ctx.text === 'json_mode') {
      return ctx.scene.enter('json');
    }
    if (ctx.text === 'talk_mode') {
      await ctx.send({
        message: '–ù—É —á—Ç–æ –∂, –ø–æ–≥–æ–≤–æ—Ä–∏–º.',
        keyboard: gptKeyboard,
      });
      isTalkMode = true;
    }
    if (ctx.text === '/start') {
      await ctx.send({ message: '–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º', keyboard: startKeyboard });
    }
  }
  return next();
});

(async () => {
  try {
    console.log('üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...');
    await vk.updates.start();
    console.log('‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ —Å–ª—É—à–∞–µ—Ç —Å–æ–±—ã—Ç–∏—è');
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞:', error);
  }
})();
